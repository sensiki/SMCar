C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN motor.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE Source\motor.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\µç»ú¿ØÖÆ) DEBUG OBJECT
                    -EXTEND PRINT(.\motor.lst) TABS(2) OBJECT(motor.obj)

line level    source

   1          /*
   2          °æÈ¨ÉùÃ÷£º
   3          WIFI»úÆ÷ÈËÍø¡¤»úÆ÷ÈË´´Òâ¹¤×÷ÊÒ°æÈ¨ËùÓÐ www.wifi-robots.com
   4          Äú¿ÉÒÔÈÎÒâÐÞ¸Ä±¾³ÌÐò£¬²¢Ó¦ÓÃÓÚ×ÔÐÐÑÐ·¢µÄÖÇÄÜÐ¡³µ»úÆ÷ÈË¼°ÆäËûµç×Ó²úÆ·ÉÏ£¬µ«ÊÇ½ûÖ¹ÓÃÓÚÉÌÒµÄ²Àû¡£
   5          By WIFI»úÆ÷ÈËÍø¡¤»úÆ÷ÈË´´Òâ¹¤×÷ÊÒ
   6          */
   7          #include "motor.h"
   8          #include "uart.h"
   9          #include "timer.h"
  10          #include "mem.h"
  11          #include "OLED12864.h"
  12          
  13          #define m0 0//ºÚÏßm1,°×Ïßm0
  14          #define m1 1
  15          
  16          #define lenth 68000   //????:10000--»100--»500--»2000--80000--76000--68000
  17          #define width 27000   //500--»10-->2000--»60000--30000---»27000
  18          #define check_right 500 //2000--»20--»200--»500
  19          #define midl left1
  20          #define midr right5 
  21          
  22          
  23          uchar Cruising_Flag =0x00;
  24          uchar  Robots_Run_Status;
  25          uchar Pre_Cruising_Flag = 0x00;
  26          extern uint16 se_timer[8];
  27          extern uchar Duty_left,Duty_right; //×óÓÒÕ¼¿Õ±È±êÖ¾£¬È¡1--100
  28          
  29          void delay(long int Delay_time)//????
  30           {
  31   1       uint t=Delay_time;
  32   1       while(t--);
  33   1       }
  34          
  35          /**µç»ú³õÊ¼»¯**/
  36          void Motor_Init(void)
  37          {
  38   1        MOTOR_A_EN=1;
  39   1        MOTOR_B_EN=1;
  40   1        MOTOR_GO_STOP;
  41   1      }
  42          //¸úËæÄ£Ê½
  43          void Follow_Track(void)
  44          {
  45   1            switch(Robots_Run_Status)
  46   1           {
  47   2            case 0x01:MOTOR_GO_RIGHT;     break;    
  48   2            case 0x02:MOTOR_GO_LEFT;     break;    
  49   2            case 0x03:MOTOR_GO_FORWARD;  break;    
  50   2            case 0x04:MOTOR_GO_STOP;  break;  
  51   2           }
  52   1      
  53   1          
  54   1             if(Input_Detect1 == 1) //ÖÐ¼ä´«¸ÐÆ÷OK
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 2   

  55   1            {
  56   2            
  57   2              if((Input_Detect0 == 0)&& (Input_Detect2 == 0)) //Á½±ßÍ¬Ê±Ì½²âµ½ÕÏ°­Îï
  58   2            {
  59   3            
  60   3               Robots_Run_Status=0x04;//Í£Ö¹ 
  61   3            } 
  62   2             
  63   2            if((Input_Detect0 == 0)&& (Input_Detect2 == 1))//×ó²àÕÏ°­Îï
  64   2            {
  65   3            
  66   3              Robots_Run_Status=0x01;//ÓÒ×ª 
  67   3            }
  68   2          
  69   2            if((Input_Detect0 == 1)&& (Input_Detect2 == 0))//ÓÒ²àÕÏ°­Îï
  70   2            {
  71   3              Robots_Run_Status=0x02;//×ó×ª 
  72   3            }
  73   2             
  74   2            if((Input_Detect0 == 1)&& (Input_Detect2 == 1))//ÎÞÈÎºÎÕÏ°­Îï
  75   2            {
  76   3              Robots_Run_Status=0x03;//Ö±ÐÐ 
  77   3            }
  78   2            }
  79   1            else
  80   1            {
  81   2                 Robots_Run_Status=0x04;
  82   2            }
  83   1      
  84   1      }
  85          
  86          //±ÜÕÏÄ£Ê½
  87          void Avoiding(void)
  88          {
  89   1             switch(Robots_Run_Status)
  90   1           {
  91   2            case 0x01:MOTOR_GO_RIGHT;     break;    
  92   2            case 0x02:MOTOR_GO_LEFT;     break;    
  93   2            case 0x03:MOTOR_GO_FORWARD;  break;    
  94   2            case 0x04:MOTOR_GO_STOP;  break;
  95   2            case 0x05:MOTOR_GO_BACK; break;      
  96   2           }
  97   1      
  98   1              if((left2 == 1) || (right4 == 1) || (Input_Detect1==0))
  99   1            {
 100   2              
 101   2              Robots_Run_Status=0x04;
 102   2            } 
 103   1            else //·ñÔòµç»úÖ´ÐÐÇ°½ø¶¯×÷
 104   1            {
 105   2                Robots_Run_Status=0x03;
 106   2            }
 107   1      }
 108          //ÊÖ±Û¶¯×÷Õ¹Ê¾
 109          void ARMShow(void)
 110          {
 111   1      
 112   1        se_timer[0]=100;
 113   1        Delay_Ms(1000);
 114   1        se_timer[1]=70;
 115   1        Delay_Ms(1000);
 116   1        se_timer[2]=60;
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 3   

 117   1        Delay_Ms(1000);
 118   1        se_timer[3]=50;
 119   1        Delay_Ms(1000);
 120   1      
 121   1        se_timer[3]=81;
 122   1        Delay_Ms(1000);
 123   1        se_timer[2]=160;
 124   1        Delay_Ms(1000);
 125   1        se_timer[1]=120;
 126   1        Delay_Ms(1000);
 127   1        se_timer[0]=140;
 128   1        Delay_Ms(1000);
 129   1      }
 130          
 131          //ÊÖ±Û¶¯×÷Õ¹Ê¾
 132          void HeadShow(void)
 133          {
 134   1         Beep=~Beep;
 135   1        se_timer[7]=170;
 136   1        Delay_Ms(1000);
 137   1      
 138   1        se_timer[7]=0;
 139   1        Delay_Ms(1000);
 140   1      }
 141          
 142          //·¢ËÍ³¬Éù²¨
 143          void Send_wave(void)
 144          {
 145   1          uint16 i;
 146   1      
 147   1        Trig = 1;
 148   1        for(i=0;i<150;i++);
 149   1        Trig = 0;
 150   1      }
 151          //»ñµÃ¾àÀëÖµ
 152          uchar Get_Distance(void)
 153          {
 154   1          uint32 Distance = 0;
 155   1      
 156   1          Send_wave();
 157   1          TH1 = 0;
 158   1          TL1 = 0;
 159   1        while(TH1<250 && Echo!= 1);   
 160   1        if(TH1 <= 250)  //²â¾à·¶Î§<0.5M
 161   1        {
 162   2          TH1 = 0;
 163   2          TL1 = 0;
 164   2           while(Echo == 1);
 165   2           Distance = TH1;
 166   2           Distance = Distance*256;
 167   2           Distance = Distance + TL1;
 168   2           Distance = Distance * 17; 
 169   2           Distance = Distance / 22118;
 170   2           return (uchar)(Distance&0xFF);
 171   2        }
 172   1      }
 173          //Ñ²ÏßÄ£Ê½
 174          void FollowLine(void)
 175          {
 176   1      
 177   1         if(right5==m1){line_right();}
 178   1         else 
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 4   

 179   1         if(left1==m1){line_left();}
 180   1         else
 181   1         if(left2==m1){correct_left();}
 182   1         else
 183   1         if(right4==m1){correct_right();}
 184   1         else
 185   1             if(mid3==m1)
 186   1         line_straight();
 187   1             else
 188   1               stop();
 189   1      
 190   1          
 191   1      }
 192          //Í¨¹ýÀ×´ï±ÜÕÏ
 193          void AvoidByRadar(void)
 194          {
 195   1         if(Get_Distance()<0x1A)//Èç¹ûÀ×´ï»Ø²¨Êý¾ÝÐ¡ÓÚ10ÀåÃ×´¥·¢
 196   1        {
 197   2           MOTOR_GO_STOP;
 198   2        }
 199   1        else
 200   1        {
 201   2          MOTOR_GO_FORWARD;
 202   2        }
 203   1      
 204   1      }
 205          void Send_Distance(void)
 206          {
 207   1           UART_send_byte(0xFF);
 208   1           UART_send_byte(0x03);
 209   1           UART_send_byte(0x00);
 210   1           UART_send_byte(Get_Distance());
 211   1           UART_send_byte(0xFF);
 212   1           Delay_Ms(1000);   
 213   1      }
 214          //Ä£Ê½Ö´ÐÐ×Óº¯Êý£¬¸ù¾Ý±êÖ¾Î»½øÐÐÅÐ¶Ï
 215          void Cruising_Mod(void)
 216          {
 217   1             
 218   1         if(Pre_Cruising_Flag != Cruising_Flag)
 219   1         {
 220   2             if(Pre_Cruising_Flag != 0)
 221   2           {
 222   3               MOTOR_GO_STOP; 
 223   3           }
 224   2      
 225   2             Pre_Cruising_Flag =  Cruising_Flag;
 226   2           
 227   2         }  
 228   1      
 229   1        switch(Cruising_Flag)
 230   1        {
 231   2          case 0x00:
 232   2            if((Get_Distance()<0x10)&&(Robots_Run_Status==0x03))
 233   2           {
 234   3             MOTOR_GO_STOP;
 235   3             MAINLIGHT_TURNON;
 236   3           }
 237   2           else
 238   2           {
 239   3             MAINLIGHT_TURNOFF;
 240   3           }
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 5   

 241   2          break;
 242   2           case 0x01:Follow_Track(); break;//¸úËæÄ£Ê½
 243   2           case 0x02:FollowLine(); break;//Ñ²ÏßÄ£Ê½
 244   2           case 0x03:Avoiding(); break;//±ÜÕÏÄ£Ê½
 245   2           case 0x04:AvoidByRadar();break;//³¬Éù²¨±ÚÕÏÄ£Ê½
 246   2           case 0x05:ARMShow();break;
 247   2           case 0x06:HeadShow();break;
 248   2           default:break;
 249   2        }  
 250   1      }
 251          
 252          
 253          void Delay_ForBarrier(uint32 t)
 254          {  
 255   1          uint16 i;
 256   1        while(t--)
 257   1        {
 258   2           for(i=0;i<1050;i++);
 259   2        }
 260   1      }
 261          //³µµÆ
 262          void MainLight_Init(void)
 263          {
 264   1         MAINLIGHT_TURNOFF;
 265   1      }
 266          //·äÃùÆ÷
 267          void MainBuzzer_Init(void)
 268          {
 269   1         MAINBUZZER_TURNOFF;
 270   1      }
 271          
 272          //-----------------------------------------------
 273          void correct_left()//Ïò×ó½ÃÕý
 274           {
 275   1         Duty_left =correct_speed;
 276   1         Duty_right=full_speed_right;
 277   1         MOTOR_A_CON1=0;
 278   1         MOTOR_A_CON2=1;
 279   1         MOTOR_B_CON1=0;
 280   1         MOTOR_B_CON2=1;
 281   1       }
 282          //------------------------------------------------
 283           void correct_right()//ÏòÓÒ½ÃÕý
 284           {
 285   1         Duty_left =full_speed_right;
 286   1         Duty_right=correct_speed;
 287   1         MOTOR_A_CON1=0;
 288   1         MOTOR_A_CON2=1;
 289   1         MOTOR_B_CON1=0;
 290   1         MOTOR_B_CON2=1;
 291   1       }
 292          //--------------------------------------------------
 293          void turn_left()//×ó×ª
 294          {
 295   1        Duty_left =turn_speed_left;
 296   1        Duty_right=turn_speed_right;
 297   1        MOTOR_A_CON1=1;  //???????,????,
 298   1        MOTOR_A_CON2=0;
 299   1        MOTOR_B_CON1=0;
 300   1        MOTOR_B_CON2=1;     
 301   1      }
 302          //---------------------------------------------------
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 6   

 303          void turn_right()//ÓÒ×ª
 304          {
 305   1        Duty_left =turn_speed_left;
 306   1        Duty_right=turn_speed_right;
 307   1        MOTOR_A_CON1=0;   //???????,????,
 308   1        MOTOR_A_CON2=1; 
 309   1        MOTOR_B_CON1=1; 
 310   1        MOTOR_B_CON2=0; 
 311   1      }
 312          //-----------------------------------------------------
 313          void straight() //Ö±ÐÐ
 314          {
 315   1        Duty_left =full_speed_left; //??????????,????????
 316   1        Duty_right=full_speed_right;  //?????????????,????????,????????????
 317   1        MOTOR_A_CON1=0;   //???????,????,
 318   1        MOTOR_A_CON2=1; 
 319   1        MOTOR_B_CON1=0; 
 320   1        MOTOR_B_CON2=1; 
 321   1        Robots_Run_Status=0x03;
 322   1      }
 323          void stop() //Í£Ö¹
 324          {
 325   1        Duty_left =0; //??????????,????????
 326   1        Duty_right=0; //?????????????,????????,????????????
 327   1        MOTOR_A_CON1=0;   //???????,????,
 328   1        MOTOR_A_CON2=0; 
 329   1        MOTOR_B_CON1=0; 
 330   1        MOTOR_B_CON2=0; 
 331   1      }
 332          //-----------------------------------------------------
 333          void line_straight()reentrant //?????reentrant??????,//???????
 334          {
 335   1        straight();
 336   1        if(right5==m1){line_right();}
 337   1        else  
 338   1        if(left1==m1){line_left();}
 339   1        else
 340   1        if(left2==m1)         //?????,??????,??2,4???????????????,?????????
 341   1          while(left2==m1)
 342   1           {correct_left();
 343   2             if(right5==m1)
 344   2                {
 345   3             line_right();
 346   3             goto label3;
 347   3             }
 348   2           else if(left1==m1)
 349   2           {line_left();
 350   3             goto label3;}
 351   2           }
 352   1        else 
 353   1        if(right4==m1)         //?????,??????,??2,4???????????????,?????????
 354   1         while(right4==m1)
 355   1          {correct_right();
 356   2           if(right5==m1)
 357   2             { line_right();  goto label3;}
 358   2           else if(left1==m1)
 359   2          {line_left();goto label3;}
 360   2        }
 361   1        else
 362   1        if((left1==m0)&&(left2==m0)&&(mid3==m0)&&(right4==m0)&&(right5==m0))
 363   1          {
 364   2          straight();
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 7   

 365   2          //delay(lenth);
 366   2          while(right4==m0) //??????mid3,?????????,??right4;???,??left2??
 367   2            {turn_right();}
 368   2          if(mid3==m1)
 369   2            {line_straight();}
 370   2        
 371   2        }
 372   1      
 373   1        label3: ; //?????
 374   1      }
 375          //-------------------------------------------------------------------------
 376          void line_right() //??????
 377          {
 378   1        straight();//??????????????????
 379   1        delay(lenth);
 380   1        if(mid3==m1)
 381   1        {
 382   2          turn_right();//????????
 383   2      label:delay(width); //?width??????mid3?????????????
 384   2          if(mid3==m0)
 385   2            while(right4==m0)
 386   2             {}
 387   2          else
 388   2              goto label;
 389   2          
 390   2         }
 391   1      
 392   1        else
 393   1        if(mid3==m0)
 394   1           {
 395   2             turn_right();
 396   2             while(right4==m0)
 397   2               {} 
 398   2             if(midr==m1)
 399   2               {line_straight();}
 400   2             }     
 401   1      }
 402          //-----------------------------------------------------------------
 403          void line_left() //???????
 404          { 
 405   1        while(left1==m1)
 406   1        {
 407   2        if(right5==m1) 
 408   2        {
 409   3        line_right();
 410   3        goto label2;
 411   3        } 
 412   2         }
 413   1      
 414   1         delay(check_right);//???????,????????,????????,??????????,
 415   1               //?????,??line_right()??
 416   1        if(right5==m1) 
 417   1        {
 418   2        line_right();
 419   2        goto label2;
 420   2        }
 421   1      
 422   1         if((mid3==m1)||(left2==m1)||(right4==m1)){line_straight();}
 423   1          else
 424   1          {
 425   2             while(left2==m0)
 426   2              {turn_left();}
C51 COMPILER V9.54   MOTOR                                                                 06/24/2015 09:22:07 PAGE 8   

 427   2             if(midl==m1)
 428   2                line_straight();    
 429   2          }
 430   1      label2: ;
 431   1      }
*** WARNING C316 IN LINE 431 OF Source\motor.c: unterminated conditionals
*** WARNING C291 IN LINE 172 OF Source\motor.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1196    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
